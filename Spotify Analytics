# For this project, I downloaded Spotify data from Kaggle.
# Then I created a table to insert Spotify data into.
# Finally, I performed analytics on the data using SQL. 


CREATE TABLE BIT_DB.Spotifydata (
id integer PRIMARY KEY,
artist_name varchar NOT NULL,
track_name varchar NOT NULL,
track_id varchar NOT NULL,
popularity integer NOT NULL,
danceability decimal(4,3) NOT NULL,
energy decimal(4,3) NOT NULL,
song_key integer NOT NULL,
loudness decimal(5,3) NOT NULL,
song_mode integer NOT NULL,
speechiness decimal(5,4) NOT NULL,
acousticness decimal(6,5) NOT NULL,
instrumentalness text NOT NULL,
liveness decimal(5,4) NOT NULL,
valence decimal(4,3) NOT NULL,
tempo decimal(6,3) NOT NULL,
duration_ms integer NOT NULL,
time_signature integer NOT NULL )


# Then I inserted the Spotify Data .csv into the table.

# Next, I explored the data using the following SQL. 


-- What is the average popularity, danceability, and energy by artist?
SELECT
artist_name,
ROUND(AVG(popularity),3) as Average_Popularity,
ROUND(AVG(danceability),3) as Average_Danceability,
ROUND(AVG(energy),3) as Average_Engergy
FROM BIT_DB.Spotifydata
GROUP BY artist_name
ORDER BY AVG(popularity) desc;


-- Who are the top 10 artists by popularity?
SELECT artist_name
FROM BIT_DB.Spotifydata
GROUP BY artist_name
ORDER BY popularity desc
LIMIT 10;


-- Which artist released the longest song and what was it?
SELECT
artist_name,
track_name,
duration_ms as length
FROM BIT_DB.Spotifydata
ORDER BY duration_ms desc
LIMIT 1;


-- Which artist released the shortest song and what was it?
SELECT
artist_name,
track_name,
duration_ms as length
FROM BIT_DB.Spotifydata
ORDER BY duration_ms asc
LIMIT 1;


-- What's the average danceability for the top 10 most popular songs?
SELECT AVG(danceability) as Average_Danceability
FROM BIT_DB.Spotifydata
WHERE popularity
IN (SELECT 
    popularity 
    FROM BIT_DB.Spotifydata 
    ORDER BY POPULARITY desc 
    LIMIT 10);
